<!DOCTYPE html>

<!--
   This page shows an animation of colored disks moving around
   in a canvas, bouncing off the edges.  The program uses WebGL.
   All of the points are drawn as single primitive of type POINTS.
   The color is an attribute in the vertex shader, allowing
   each point to be a different primitive.  The user can decide
   whether to have randomly colored points or to make all the
   points red.  The point size is a uniform variable, so all
   the points are the same size.  However, the user can select
   whether the size is large or small.
-->

<html>
<head>
<meta charset="UTF-8">
<title>Moving Disks in WebGL</title>
<style>
    label {
        margin-left: 30px;
    }
</style>

<script>

"use strict";

const  vertexShaderSource =
       "attribute vec2 a_coords;\n" +
       "attribute vec3 a_color;\n" +
       "varying vec3 v_color;\n" +
       "attribute float a_size;\n" +
       "varying float v_size;\n" +
//       "uniform float u_pointsize;\n" +
       "uniform float u_width;\n" +
       "uniform float u_height;\n" +
       "void main() {\n" +
       "   float x = -1.0 + 2.0*(a_coords.x / u_width);\n" +
       "   float y = 1.0 - 2.0*(a_coords.y / u_height);\n" +
       "   gl_Position = vec4(x, y, 0.0, 1.0);\n" +
       "   v_color = a_color;\n" +
       "   v_size = a_size;\n" +
       "   gl_PointSize = a_size;\n" +
       "}\n";

const  fragmentShaderSource =
       "precision mediump float;\n" +
       "varying vec3 v_color;\n" +
       "varying float v_size;\n" +
       "void main() {\n" +
       "   float distanceFromCenter = distance( gl_PointCoord, vec2(0.5,0.5) );\n" +
       "   if ( distanceFromCenter >= 0.5) {\n" +
       "       discard;  // don't draw this pixel!\n" +
       "   }\n" +
       "   gl_FragColor = vec4(v_color, 1.0);\n" +
       "}\n";

let  canvas;  // The canvas where WebGL draws.
let  gl;  // The WebGL graphics context.

let  uniformWidth;   // Location of uniform named "u_width"
let  uniformHeight;  // Location of uniform named "u_height"
let  uniformPointsize;   // Location of uniform named "u_pointsize" 
let  attributeSize;     // Location of the varying named "v_size".
let  bufferSize;    // A vertex buffer object to hold the values for sizes.
//const uniformPointSize = gl.getUniformLocation(shaderProgram, "u_pointsize");

let  attributeCoords;  // Location of the attribute named "a_coords".
let  bufferCoords;     // A vertex buffer object to hold the values for coords.

let  attributeColor;   // Location of the attribute named "a_color".

let  bufferColor;     // A vertex buffer object to hold the values for color.

let  animating = false;  // is the animation running?

/* Data for the points, including their coordinates, velocities and colors.
   The values for the arrays are created during initialization.  The random
   colors are used when the user selects colored rather than red points.
   The positions of the points are updated for each frame of the animation. */

const  POINT_COUNT = 10;
const  pointCoords = new Float32Array( 2*POINT_COUNT );
const  pointVelocities = new Float32Array( 2*POINT_COUNT );
const  pointRandomColors = new Float32Array( 3*POINT_COUNT );
const  pointSizes = new Float32Array(POINT_COUNT);


function createPointData() { // called during initialization to fill the arrays with data.
    const uniqueCoordinates = new Set();
    let  size = 64 // Largest point size is 32
    let xPointDisplacer = size;
    let yPointDisplacer = size;
    for (let i = 0; i < POINT_COUNT; i++) {
           // Each point has two coordinates and two velocities.  Velocity number k
           // tells how fast coordinate number k changes in pixels per frame.
        if (i%(Math.floor(Math.sqrt(POINT_COUNT)))==0 && i != 0) {
            xPointDisplacer += size*2;
            yPointDisplacer = size;
        }

        // Each point has two coordinates and two velocities.  Velocity number k
        // tells how fast coordinate number k changes in pixels per frame.
        pointCoords[2*i] = xPointDisplacer;  // x-coordinate of point
        pointCoords[2*i+1] = yPointDisplacer;  // y-coordinate of point

        yPointDisplacer += size*2;      //Displaces the next point by the diameter of the points
        let  randomVelocity = 1 + 3*Math.random();
        let  randomAngle = 2*Math.PI * Math.random();
        pointVelocities[2*i] = randomVelocity * Math.cos(randomAngle);
        pointVelocities[2*i+1] = randomVelocity * Math.sin(randomAngle);
    }
    for (let i = 0; i < POINT_COUNT; i++) {
        pointSizes[i] = Math.random() * 48 + 16; // Replace maxSize and minSize with your desired range
    }
    for (let i = 0; i < 3 * POINT_COUNT; i++) {
           // The array contains color components, with three numbers per vertex.
           // The color components are just random numbers in the range zero to 1.
        pointRandomColors[i] = Math.random();
    }
}

function updatePointCoordsForFrame() { // called during an animation, before each frame.
    let  randomSizes = document.getElementById("randomSizeCheckbox").checked;
    if (randomSizes) {
        for (let i = 0; i < 2*POINT_COUNT; i += 2) { // x-coords
            let  size = pointSizes[(i/2)] / 2; // radius
            pointCoords[i] += pointVelocities[i];
            if (pointCoords[i]-size < 0) {
                pointCoords[i] = size-(pointCoords[i]-size);// move coord back onto canvas
                pointVelocities[i] = Math.abs(pointVelocities[i]); // and make sure point is moving in positive direction
            }
            else if (pointCoords[i]+size > canvas.width) {
                pointCoords[i] = canvas.width - (pointCoords[i]+size - canvas.width) - size;// move coord back onto canvas
                pointVelocities[i] = -Math.abs(pointVelocities[i]); // and make sure point is moving in negative direction
            }
        }
        for (let i = 1; i < 2*POINT_COUNT; i += 2) { // y-coords
            let  size = pointSizes[((i-1)/2)] / 2; // radius
            pointCoords[i] += pointVelocities[i];
            if (pointCoords[i]-size < 0) {
                pointCoords[i] = size-(pointCoords[i]-size);// move coord back onto canvas
                pointVelocities[i] = Math.abs(pointVelocities[i]); // and make sure point is moving in positive direction
            }
            else if (pointCoords[i]+size > canvas.height) {
                pointCoords[i] = canvas.height - (pointCoords[i]+size - canvas.height) - size;// move coord back onto canvas
                pointVelocities[i] = -Math.abs(pointVelocities[i]); // and make sure point is moving in negative direction
            }
        }
    }else{
        let size = Number(document.getElementById("sizeChoice").value)/2;
        for (let i = 0; i < 2*POINT_COUNT; i += 2) { // x-coords
            pointCoords[i] += pointVelocities[i];
            if (pointCoords[i]-size < 0) {
                pointCoords[i] = size-(pointCoords[i]-size);// move coord back onto canvas
                pointVelocities[i] = Math.abs(pointVelocities[i]); // and make sure point is moving in positive direction
            }
            else if (pointCoords[i]+size > canvas.width) {
                pointCoords[i] = canvas.width - (pointCoords[i]+size - canvas.width) - size;// move coord back onto canvas
                pointVelocities[i] = -Math.abs(pointVelocities[i]); // and make sure point is moving in negative direction
            }
        }
        for (let i = 1; i < 2*POINT_COUNT; i += 2) { // y-coords
            pointCoords[i] += pointVelocities[i];
            if (pointCoords[i]-size < 0) {
                pointCoords[i] = size-(pointCoords[i]-size);// move coord back onto canvas
                pointVelocities[i] = Math.abs(pointVelocities[i]); // and make sure point is moving in positive direction
            }
            else if (pointCoords[i]+size > canvas.height) {
                pointCoords[i] = canvas.height - (pointCoords[i]+size - canvas.height) - size;// move coord back onto canvas
                pointVelocities[i] = -Math.abs(pointVelocities[i]); // and make sure point is moving in negative direction
            }
        }
    }
    detectCollisions();
}

function detectCollisions(){
    for (let i = 0; i < POINT_COUNT; i += 1) {
        for(let j = 0; j < POINT_COUNT; j += 1){
            let [x1, y1, radius1] = [pointCoords[2*i], pointCoords[2*i+1], pointSizes[i]/2];
            let [x2, y2, radius2] = [pointCoords[2*j], pointCoords[2*j+1], pointSizes[j]/2];
            if(!checkCollision(x1, y1, radius1, x2, y2, radius2)) {
                collisionCalculation(x1, y1, radius1, x2, y2, radius2, i, j);
            }
        }
    }
}

function checkCollision(x1, y1, r1, x2, y2, r2) {
    let euclideanDistance = Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));
    return euclideanDistance > r1 + r2; //Returns true if they aren't overlapping
}

function collisionCalculation(x1,y1,r1,x2,y2,r2,i,j){
    let [vx1, vy1]  = [pointVelocities[2 * i], pointVelocities[2 * i + 1]];
    let [vx2, vy2] = [pointVelocities[2 * j], pointVelocities[2 * j + 1]];
//    let distance = 0;
    x1 -= vx1;
    y1 -= vy1;
    x2 -= vx2;
    y2 -= vy2;
    let m1 = r1 * r1 * Math.PI;
    let m2 =  r2 * r2 * Math.PI;
    let xn = x2 - x1;
    let yn = y2 - y1;
    let u = 1/(Math.sqrt((xn*xn)+(yn*yn)))
    let xt = -yn;
    let yt = xn;
    let vx1n = u*vx1*xn;
    let vy1n = u*vy1*yn;
    let vx2n = u*vx2*xn;
    let vy2n = u*vx2*yn;
    let vx1t = u*vx1*xt;
    let vy1t = u*vy1*yt;
    let vx2t = u*vx2*xt;
    let vy2t = u*vx2*yt;
    let vx1nnew = (vx1n*(m1-m2)+2*m2*vx2n)/(m1+m2);
    let vy1nnew = (vy1n*(m1-m2)+2*m2*vy2n)/(m1+m2);
    let vx2nnew = (vx2n*(m2-m1)+2*m1*vx1n)/(m1+m2);
    let vy2nnew = (vy2n*(m2-m1)+2*m2*vy1n)/(m1+m2);
    
    let vx1nfinal = vx1nnew*u*xn;
    let vx2nfinal = vx2nnew*u*xn;
    let vy1nfinal = vy1nnew*u*yn;
    let vy2nfinal = vy2nnew*u*yn;
    let vx1tfinal = vx1t*u*xt;
    let vx2tfinal = vx2t*u*xt;
    let vy1tfinal = vy1t*u*yt;
    let vy2tfinal = vy2t*u*yt;

    let theta = -Math.atan2(y2 - y1, x2 - x1);
    let v1 = [vx1 * Math.cos(theta) - vy1 * Math.sin(theta), vx1 * Math.sin(theta) + vy1 * Math.cos(theta)];
    let v2 = [vx2 * Math.cos(theta) - vy2 * Math.sin(theta), vx2 * Math.sin(theta) + vy2 * Math.cos(theta)];
    let vn1 = [(v1[0]*(m1-m2)+m2*2*v2[0])/(m1+m2) * Math.cos(theta) - v1[1] * Math.sin(theta), (v1[0]*(m1-m2)+m2*2*v2[0])/(m1+m2)*Math.sin(theta) + v1[1] * Math.cos(theta)];
    let vn2 = [(v2[0]*(m2-m1)+m1*2*v1[0])/(m1+m2) * Math.cos(theta) - v2[1] * Math.sin(theta), (v2[1]*(m2-m1)+2*m1*v1[1])/(m1+m2)*Math.sin(theta) + v2[1] * Math.cos(theta)];

    vx1 = vn1[0];
    vy1 = vn1[1];
    vx2 = vn2[0];
    vy2 = vn2[1];
    pointVelocities[2 * i] = vx1;
    pointVelocities[2 * i + 1] = vy1;
    pointVelocities[2 * j] = vx2;
    pointVelocities[2 * j + 1] = vy2;

    pointCoords[2 * i] += vx1;
    pointCoords[2 * i + 1] += vy1;
    pointCoords[2 * j] += vx2;
    pointCoords[2 * j + 1] += vy2;

    /* pointCoords[2 * i] -= vx1;
    pointCoords[2 * i + 1] -= vy1;
    pointCoords[2 * j] -= vx2;
    pointCoords[2 * j + 1] -= vy2; */
}

/**
 *  Draws the content of the canvas, in this case, one primitive ot
 *  type gl.POINTS, which represents all of the disks in the image.
 */
function draw() {

    gl.clearColor(0.5,0.5,0.5,1);  // specify the color to be used for clearing
    gl.clear(gl.COLOR_BUFFER_BIT);  // clear the canvas (to black)
    
    /* Get options from the user interface. */

    let  randomColors = document.getElementById("colorCheckbox").checked;
    let  randomSizes = document.getElementById("randomSizeCheckbox").checked;
    let  centerDisks = document.getElementById("centerDisksCheckbox").checked;
    let  pointsize = Number(document.getElementById("sizeChoice").value);
    
    /* Set up values for the "coords" attribute, giving point's positions */

    gl.bindBuffer(gl.ARRAY_BUFFER, bufferCoords);
    gl.bufferData(gl.ARRAY_BUFFER, pointCoords, gl.STREAM_DRAW);
    gl.vertexAttribPointer(attributeCoords, 2, gl.FLOAT, false, 0, 0);
    gl.enableVertexAttribArray(attributeCoords); 
   
    /* Set up values for the "color" attribute */
    
    if ( randomColors ) { // use the attribute values from the color VBO, filled during initialization
        gl.enableVertexAttribArray(attributeColor); 
    }
    else { // turn off vertexAttribArray and set a constant attribute color
        gl.disableVertexAttribArray(attributeColor);
        gl.vertexAttrib3f(attributeColor, 1, 0.84, 0);
    }
    
    if (!randomSizes){
        gl.disableVertexAttribArray(attributeSize);
        /* Set the pointsize uniform variable */
        gl.vertexAttrib1f(attributeSize, pointsize);
        /* Draw all the points with one command. */
        
    }else{
        //gl.vertexAttribPointer(attributeSize, 1, gl.FLOAT, false, 0, 0);
        gl.enableVertexAttribArray(attributeSize);
    }
    gl.drawArrays(gl.POINTS, 0, POINT_COUNT);
    if (centerDisks) {
        gl.disableVertexAttribArray(attributeSize);
        gl.vertexAttrib1f(attributeSize, 8);
        gl.disableVertexAttribArray(attributeColor);
        gl.vertexAttrib3f(attributeColor, 0, 0, 0);
        gl.drawArrays(gl.POINTS, 0, POINT_COUNT);
    }
}

/**
 * Creates a program for use in the WebGL context gl, and returns the
 * identifier for that program.  If an error occurs while compiling or
 * linking the program, an exception of type String is thrown.  The error
 * string contains the compilation or linking error.  If no error occurs,
 * the program identifier is the return value of the function.
 */
function createProgram(gl, vertexShaderSource, fragmentShaderSource) {
   let  vsh = gl.createShader( gl.VERTEX_SHADER );
   gl.shaderSource( vsh, vertexShaderSource );
   gl.compileShader( vsh );
   if ( ! gl.getShaderParameter(vsh, gl.COMPILE_STATUS) ) {
      throw new Error("Error in vertex shader:  " + gl.getShaderInfoLog(vsh));
   }
   let  fsh = gl.createShader( gl.FRAGMENT_SHADER );
   gl.shaderSource( fsh, fragmentShaderSource );
   gl.compileShader( fsh );
   if ( ! gl.getShaderParameter(fsh, gl.COMPILE_STATUS) ) {
      throw new Error("Error in fragment shader:  " + gl.getShaderInfoLog(fsh));
   }
   let  prog = gl.createProgram();
   gl.attachShader( prog, vsh );
   gl.attachShader( prog, fsh );
   gl.linkProgram( prog );
   if ( ! gl.getProgramParameter( prog, gl.LINK_STATUS) ) {
      throw new Error("Link error in program:  " + gl.getProgramInfoLog(prog));
   }
   return prog;
}

/**
 * Initialize the WebGL graphics context
 */
function initGL() {
    let  prog = createProgram( gl, vertexShaderSource, fragmentShaderSource );
    gl.useProgram(prog);
    attributeCoords = gl.getAttribLocation(prog, "a_coords");
    bufferCoords = gl.createBuffer();
    attributeColor = gl.getAttribLocation(prog, "a_color");
    attributeSize = gl.getAttribLocation(prog, "a_color");
    attributeSize = gl.getAttribLocation(prog, "a_size");
    bufferSize = gl.createBuffer();
    bufferColor = gl.createBuffer();
    uniformHeight = gl.getUniformLocation(prog, "u_height");
    uniformWidth = gl.getUniformLocation(prog, "u_width");
    gl.uniform1f(uniformHeight, canvas.height);
    gl.uniform1f(uniformWidth, canvas.width);
//    uniformPointsize = gl.getUniformLocation(prog, "u_pointsize");
    createPointData();
    gl.bindBuffer(gl.ARRAY_BUFFER, bufferSize);
    gl.bufferData(gl.ARRAY_BUFFER, pointSizes, gl.STREAM_DRAW);
    gl.vertexAttribPointer(attributeSize, 1, gl.FLOAT, false, 0, 0);
    gl.bindBuffer(gl.ARRAY_BUFFER, bufferColor);
    gl.bufferData(gl.ARRAY_BUFFER, pointRandomColors, gl.STREAM_DRAW);
    gl.vertexAttribPointer(attributeColor, 3, gl.FLOAT, false, 0, 0);
}

/*------------ Animation support ------------*/

function doFrame() {
    if (animating) {
        updatePointCoordsForFrame();
        draw();
        requestAnimationFrame(doFrame);
    }
}

function doAnimationCheckbox() {
    let  anim = document.getElementById("animateCheckbox").checked;
    if (anim !== animating) {
        animating = anim;
        if (animating) {
            doFrame();
        }
    }
}


/*-------------------------------------------*/

/**
 * Initialize the program.  This function is called after the page has been loaded.
 */
function init() {
    try {
        canvas = document.getElementById("webglcanvas");
        let  options = {  // no need for alpha channel or depth buffer in this program
            alpha: false,
            depth: false
        };
        gl = canvas.getContext("webgl", options);
              // (Note: this page would work with "webgl2", with no further modification.)
        if ( ! gl ) {
            throw "Browser does not support WebGL";
        }
    }
    catch (e) {
        document.getElementById("canvas-holder").innerHTML =
            "<p>Sorry, could not get a WebGL graphics context.</p>";
        return;
    }
    try {
        initGL();  // initialize the WebGL graphics context
    }
    catch (e) {
        document.getElementById("canvas-holder").innerHTML =
            "<p>Sorry, could not initialize the WebGL graphics context: " + e + "</p>";
        return;
    }
    document.getElementById("animateCheckbox").checked = true;
    document.getElementById("randomSizeCheckbox").checked = false;
    document.getElementById("colorCheckbox").checked = true;
    document.getElementById("centerDisksCheckbox").checked = false;
    document.getElementById("sizeChoice").value = "32";
    document.getElementById("animateCheckbox").onchange = doAnimationCheckbox;
    document.getElementById("colorCheckbox").onchange = function() {
        if (!animating) {
            draw();
        }
    };
    document.getElementById("sizeChoice").onchange = function() {
        if (!animating) {
            draw();
        }
    };
    
    doAnimationCheckbox();
}


window.onload = init;  // Arrange for init() to be called after page has loaded.

</script>
</head>
<body>

<h2>Moving Points with the WebGL POINTS primitive</h2>

<noscript><p><b>Sorry, but this page requires JavaScript.</b></p></noscript>

<p>
    <label><b><input type="checkbox" id="animateCheckbox">&nbsp;Animate</b></label>
    <label><b><input type="checkbox" id="colorCheckbox">&nbsp;Random&nbsp;Colors</b></label>
    <label><b><input type="checkbox" id="randomSizeCheckbox">&nbsp;Random&nbsp;Sizes</b></label>
    <label><b><input type="checkbox" id="centerDisksCheckbox">&nbsp;Center&nbsp;Disks</b></label>
    <label><b>Point Size:</b>&nbsp;<select id="sizeChoice">
        <option value="16">Small</option>
        <option value="32">Medium</option>
        <option value="64">Large</option>
    </select></label>
</p>

<div id="canvas-holder">
<canvas id="webglcanvas" width="800" height="600"></canvas>
</div>
</body>
</html>